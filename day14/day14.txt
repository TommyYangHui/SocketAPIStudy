复习：
1.网络的基本常识
1.1 7层网络模型
   应用层 表示层 会话层 传输层  网络层 
数据链路层 物理层

1.2 常见的网络协议
   TCP - 传输控制协议,面向连接的协议,类似打电话
   UDP - 用户数据报协议,非面向连接的协议,类似发短信
   IP  - 互联网协议

1.3 IP地址
   IP地址是互联网中的唯一地址标识,本质就是32位的整数（IPv4），也存在128位的IP地址(IPv6)
   采用点分十进制表示法

1.4 子网掩码 
   IP地址  & 子网掩码
1.5 端口号
   数据类型 unsigned short类型,范围 0 ~ 65535
   其中 0 ~ 1024之间的端口号被系统占用
1.6 字节序
   小端系统：低位内存地址存放低位数据
   大端系统：低位内存地址存放高位数据
   将发送到网络的数据转换成网络字节序(大端系统)再发送,对接受到的数据转换为主机字节序   

2.基于socket的一对一通信模型
服务器：
   (1)创建socket,使用socket函数  
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址，使用bind函数
   (4)进行通信，使用read/write函数
   (5)关闭socket,使用close函数
客户端：
   (1)创建socket,使用socket函数
   (2)准备通信地址,是服务器的地址
   (3)连接socket和通信地址,使用connect函数
   (4)进行通信,使用read/write函数
   (5)关闭socket,使用close函数
-------------------------------------------------
今天内容：
   (1)基于TCP协议的编程模型
   (2)TCP协议和UDP协议的比较
   (3)基于UDP协议的编程模型
   (4)多线程的初识

1.基于TCP协议的编程模型
1.1 编程模型(重点掌握）
服务器：
   (1)创建socket,使用socket函数
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址,使用bind函数
   (4)监听，使用listen函数
   (5)响应客户端的连接请求，使用accept函数
   (6)进行通信，使用send/recv函数
   (7)关闭socket,使用close函数
客户端：  
   (1)创建socket,使用socket函数
   (2)准备通信地址,是服务器的地址
   (3)连接socket和通信地址,使用connect函数
   (4)进行通信,使用send/recv函数
   (5)关闭socket,使用close函数

1.2 相关函数的解析
(1)listen函数
   #include <sys/types.h> 
   #include <sys/socket.h>
   int listen(int sockfd, int backlog);
第一个参数：socket描述符,socket函数的返回值
第二个参数：允许排队等待被响应的最大连接数
函数功能：主要用于监听指定socket上的连接请求

(2)accept函数
   #include <sys/types.h> 
   #include <sys/socket.h>
   int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
第一个参数：socket描述符,socket函数的返回值
第二个参数：结构体指针，用于存储客户端的通信地址
第三个参数：通信地址的大小，客户端的地址大小
返回值：成功返回一个socket描述符,失败返回-1
函数功能：主要用于响应指定socket上的连接请求

注意：
   socket函数创建的socket主要用于监听连接数
   accept函数创建的socket主要用于与客户端通信

(3)inet_ntoa函数
   char *inet_ntoa(struct in_addr in);
=> 主要用于将结构体类型的IP地址转换为字符串类型

练习：
   使用基于TCP协议的编程模型实现以下功能：
(1)实现服务器可以不断地响应客户端的连接请求
(2)实现服务器可以同时响应多个客户端，进行通信
(3)实现针对每一个客户端都可以不断地进行通信
(4)实现当客户端发来"bye"时，表示客户端下线，
   终止响应该客户端的子进程  
(5)采用信号2负责关闭服务器，并且关闭对应的描述符

2.TCP协议和UDP协议的比较
2.1 TCP协议
  TCP协议 - 传输控制协议,面向连接的协议,类似打电话
  建立连接 => 数据传递和通信 => 断开连接
  在通信的整个全程保持连接
优点：
 可以自动重发一切错误数据，保证数据的正确性和完整性
 数据接受方可以通知发送方进行数据流量的控制
缺点：
  服务器端的压力比较大,资源占用率比较高

2.2 UDP协议
  UDP协议 -用户数据报协议,非面向连接协议,类似发短信
优点：
  服务器的压力比较小,资源占用率比较低
缺点：
 不会自动重发错误数据，不能保证数据的正确性和完整性
 数据接受方也不能通知发送方进行流量的控制

3.基于UDP协议的通信模型
3.1 通信模型(重点掌握)
服务器：
   (1)创建socket,使用socket函数  
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址，使用bind函数
   (4)进行通信，使用sendto/send/recvfrom/recv函数
   (5)关闭socket,使用close函数
客户端：
   (1)创建socket，使用socket函数
   (2)准备通信地址，使用服务器的地址
   (3)进行通信,使用sendto/send/recvfrom/recv函数
   (4)关闭socket,使用close函数

3.2 相关函数的解析
(1)sendto函数
   #include <sys/types.h>
   #include <sys/socket.h>
   ssize_t send(int sockfd, const void *buf, size_t len, int flags);
   ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,const struct sockaddr *dest_addr, socklen_t addrlen);
第一个参数：socket描述符,socket函数的返回值
第二个参数：被发送的数据首地址
第三个参数：发送的数据大小
第四个参数：发送的标志，一般给0即可
第五个参数：发送数据的目标地址(发到哪里去)
第六个参数：目标地址的大小
返回值：成功返回发送的数据大小，失败返回-1
函数功能：主要用于向指定的地址发送指定的数据

(2)recvfrom函数
   #include <sys/types.h>
   #include <sys/socket.h>
   ssize_t recv(int sockfd, void *buf, size_t len, int flags);
   ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,struct sockaddr *src_addr, socklen_t *addrlen);
第一个参数：socket描述符,socket函数的返回值
第二个参数：缓冲区首地址(接受到的数据存到哪里去)
第三个参数：接受的数据大小
第四个参数：接受的标志，一般给0即可
第五个参数：数据发送方的地址(来电显示的功能)
第六个参数：数据发送方的地址大小
返回值：成功返回接受的数据大小，失败返回-1
函数功能：主要用于接受数据并保存发送方地址

4.线程的初识
4.1 基本概念
   线程 - 隶属于进程,是进程内部的程序流,目前主流的操作系统支持多进程，而在每一个进程的内部，又可以支持多线程
   进程是重量级的，每个进程都需要独立的内存空间，所以新建进程对于系统中的资源消耗比较大;而线程是轻量级的，线程共享所在进程的内存资源等,但是每一个线程会需要一个很小的独立的栈区
 
4.2 线程的创建
(1)pthread_create函数
    #include <pthread.h>
    int pthread_create(pthread_t *thread, const
 pthread_attr_t *attr,void *(*start_routine) (
void *), void *arg);
第一个参数：指针变量，存储线程的ID
第二个参数：线程的属性，一般给NULL即可
第三个参数：函数指针，表示新线程指定的功能函数
第四个参数：用于作为第三个参数的实参
返回值：成功返回0，失败返回错误编号
函数功能：主要用于在调用的进程中启动新的线程

注意：
   a.编译链接时加选项： -pthread
   b.在同一个进程内部可以启动新线程，其中新线程叫做子线程，原来的线程叫做主线程，进程中的多个线程之间相互独立又相互影响，当主线程结束时，进程结束，而进程一旦结束，进程中的所有线程都会结束

作业：
   考虑基于tcp一对多的通信模型中,如何实现将服务器接受到的消息转发给所有的客户端？？？

明日预报：
   (1)多线程
   (2)综合小项目：基于TCP协议的聊天室







     




   






  


















  











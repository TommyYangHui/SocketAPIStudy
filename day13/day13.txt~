复习：
1.使用管道实现进程间的通信
1.1 基本概念和分类	
   管道本质上还是以文件作为媒介,是一种特殊的文件
   管道分为：有名管道 和 无名管道
1.2 有名管道的使用
   mkfifo xxx.pipe  创建管道文件
   echo hello > xxx.pipe  
   cat xxx.pipe
1.3 无名管道的使用
   pipe(int pipefd[2]); [0] 读端  [1] 写端  

2.使用共享内存实现进程间的通信
2.1 通信的流程
(1)获取key值，使用ftok函数
(2)创建/获取共享内存，使用shmget函数
(3)挂接共享内存，使用shmat函数
(4)使用共享内存
(5)脱接共享内存，使用shmdt函数
(6)如果不再使用，则删除共享内存，使用shmctl函数

2.2 基本命令
   ipcs -m  查看已存在的共享内存
   ipcrm -m 共享内存的ID 删除指定的共享内存

3.使用信号量集实现进程间的通信
3.1 基本概念
  信号量 - 本质就是一个计数器，主要用于控制同时访问共享资源的进程数
  信号量集 - 信号量的集合，主要用于控制多种资源

3.2 信号量的工作方式
(1)对信号量进行初始化，初始化最大值
(2)如果有进程申请到资源，那么信号量减1
(3)当信号量的值为0时，申请资源的进程进入阻塞状态
(4)如果有进程释放资源，那么信号量 加 1
(5)当信号量的值>0时，那么阻塞的进程有可以申请到资源，申请不到的进程继续阻塞

3.3 使用信号量集实现通信的基本流程
(1)获取key值，使用ftok函数
(2)创建/获取信号量集，使用semget函数
(3)初始化信号量集，使用semctl函数
(4)操作信号量集，使用semop函数
(5)如果不再使用，则删除信号量集，使用semctl函数

3.4 基本命令
  ipcs -s  查看系统中存在的信号量集
  ipcrm -s 信号量集的ID  删除指定的信号量集
  ipcs -a  查看系统中所有的IPC结构
-------------------------------------------------
今天内容：
   (1)网络常识
   (2)基于socket的一对一编程模型
   (3)基于TCP协议的网络编程模型

1.网络常识
  目前主流的通讯软件：QQ 微信 飞信 阿里旺旺 ...  
1.1 七层网络协议
  从逻辑上将互联网的通信划分为7层网络模型：
应用层 - 主要用于和应用程序进行通信，将数据交给程序
表示层 - 主要用于按照通用的格式对数据进行封装及加密
会话层 - 主要用于控制对话的开始和结束等等
传输层 - 主要用于提供数据传输的通道
网络层 - 主要用于提供一些传递数据时路径的选择等
数据链路层 -主要用于错误检查,将数据转为高低电平信号
物理层 - 主要用于借助网卡驱动，网线 设备等发送数据

1.2 常用的网络协议
(1)TCP协议
   - 传输控制协议，是一种面向连接的协议，类似打电话
(2)UDP协议
   - 用户数据报协议,是一种非面向连接协议,类似发短信
(3)IP协议
   - 互联网协议,是TCP/UDP协议的底层协议

1.3 IP地址(重点)
   IP地址 - 是互联网中的唯一地址标识，本质就是一个32位的整数(IPv4),目前存在128位的整数(IPv6)       
   
   日常生活中，IP地址采用点分十进制表示法，也就是说：将每一个字节整数转换为十进制，然后多个字节之间采用小数点(.)进行分隔
如：
   IP地址：0x01020304 => 1.2.3.4  

   IP地址分成两部分：网络地址 + 主机地址
根据IP地址网络地址和主机地址的划分，分为以下4类：
   A类： 0 + 7位网络地址 + 24位主机地址
   B类： 10 + 14位网络地址 + 16位主机地址
   C类： 110 + 21位网络地址 + 8位主机地址
   D类： 1110 + 28位多播地址

Windows操作系统中：  ipconfig   ipconfig/all
Unix/linux操作系统中：ifconfig  /sbin/ifconfig    

1.4 子网掩码
   一般来说，每一个有效的IP地址都会带着一个子网掩码，子网掩码主要用于划分一个IP地址中的网络地址和主机地址
如：
    IP地址：172.30.11.191
  子网掩码：255.255.255.0  &
---------------------------------
            172.30.11  -  网络地址
            191   - 主机地址

练习：
   判断IP地址 166.111.160.1 和 166.111.161.45 是否在同一个局域网中？？其中子网掩码：255.255.254.0

解析：
    IP地址：166.111.160.1
  子网掩码：255.255.254.0  &   
-------------------------------
            166.111.160  => 网络地址
                     1   => 主机地址

    IP地址：166.111.161.45
  子网掩码：255.255.254.0  &   
--------------------------------
            166.111.160  => 网络地址
                     45  => 主机地址
总结：
    上述两个IP地址都在同一个局域网中

1.5 Mac地址
   Mac地址，又叫做物理地址,本质就是硬件网卡的地址
   路由器中采用Mac地址进行过滤

1.6 端口号
   通过IP地址  定位到 一台 具体的主机上
   通过端口号 定位主机上的具体某一个进程
   端口号的数据类型是：unsigned short类型，
范围是0~65535，其中 0 ~ 1024之间的端口号被系统占用
   网络编程中提供：IP地址 + 端口号

1.7 字节序
  小端系统：使用低位内存地址存放低位字节数据 
  大端系统：使用低位内存地址存放高位字节数据
如： 0x12345678
  小端系统中按照地址从小到大： 0x78 0x56 0x34 0x12
  大端系统中按照地址从小到大： 0x12 0x34 0x56 0x78
 
   网络字节序：为了兼容不同的系统对多字节整数的存放问题,一般来说，在发送数据之前需要将原始数据转换为网络字节序，而在接受数据之后，需要将接受到的数据转换为主机字节序
   其中网络字节序，本质就是大端系统的字节序

2.基于socket的一对一通信模型
2.1 基本概念
   socket 插座  通信载体 作为进程间通信的通信点
2.2 通信的模型
服务器：
   (1)创建socket,使用socket函数
   (2)准备通信地址，使用结构体类型
   (3)绑定socket和通信地址,使用bind函数
   (4)进行通信，使用read/write函数
   (5)关闭socket,使用close函数

客户端：
   (1)创建socket,使用socket函数
   (2)准备通信地址，使用服务器端的地址
   (3)连接socket和通信地址,使用connect函数
   (4)进行通信，使用read/write函数
   (5)关闭socket,使用close函数

2.3 相关函数的解析
(1)socket函数
   #include  <sys/types.h>
   #include <sys/socket.h>
   int socket(int domain,int type,int protocol);
第一个参数：域/协议族 决定是本地通信还是网络通信
    AF_UNIX/AF_LOCAL - 本地通信
    AF_INET - 基于IPv4的网络通信
    AF_INET6 - 基于IPv6的网络通信
第二个参数：类型，决定是采用的通信协议
    SOCK_STREAM - 数据流方式的通信,基于TCP协议
    SOCK_DGRAM - 数据报方式的通信,基于UDP协议
第三个参数：特殊协议，一般给0即可
返回值：成功返回新的描述符，失败返回-1
函数功能：主要用于创建socket来进行通信

(2)通信地址的结构体类型
a.通用结构体类型
  struct sockaddr 
  {
     sa_family_t sa_family; //协议族
     char        sa_data[14];//字符串的地址数据
  }
注意：
  该结构体主要用于作为函数的参数类型，很少去定义结构体变量进行使用

b.实现本地通信的结构体类型
#include <sys/un.h>
struct sockaddr_un
{
  sa_family_t sun_family;//协议族,socket函数参数一
  char        sun_path[];//socket文件的路径
};

c.实现网络通信的结构体类型
#include <netinet/in.h>
struct sockaddr_in
{
   sa_family_t sin_family;//AF_INET.
   in_port_t   sin_port;//端口号
   struct in_addr sin_addr;//IP地址
}; 
struct in_addr
{
   in_addr_t  s_addr;//整数类型的IP地址
};

(3)bind函数
   #include <sys/types.h>          /* See NOTES */
   #include <sys/socket.h>
   int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
第一个参数：socket描述符,socket函数的返回值
第二个参数：通信地址,需要做类型转换
第三个参数：通信地址的大小,使用sizeof计算即可
函数功能：主要用于绑定socket和通信地址

(4)connect函数
   #include <sys/types.h>          /* See NOTES */
   #include <sys/socket.h>
   int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
函数功能：
   主要用于连接socket和通信地址,参数请参考bind函数

(5)字节序转换函数
   #include <arpa/inet.h>
   uint32_t htonl(uint32_t hostlong);
 => 主要用于将32位的主机字节序转换为网络字节序
   uint16_t htons(uint16_t hostshort);
 => 主要用于将16位的主机字节序转换为网络字节序
   uint32_t ntohl(uint32_t netlong);
 => 主要用于将32位的网络字节序转换为主机字节序
   uint16_t ntohs(uint16_t netshort);
 => 主要用于将16位的网络字节序转换为主机字节序

(6)IP地址的转换函数
   #include <sys/socket.h>
   #include <netinet/in.h>
   #include <arpa/inet.h>
   in_addr_t inet_addr(const char *cp);
函数功能：
   主要用于将字符串形式的IP地址转换为整数类型

作业：
   查询listen函数和accept函数
明日预报：
   (1)网络编程











    
   






















   

















   


    










   
  



















